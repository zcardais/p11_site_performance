{
  "_args": [
    [
      {
        "raw": "sprity",
        "scope": null,
        "escapedName": "sprity",
        "name": "sprity",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/zachcardais/Sites/Treehouse/FEWD Techdegree/p11_site_performance"
    ]
  ],
  "_from": "sprity@latest",
  "_id": "sprity@1.0.8",
  "_inCache": true,
  "_location": "/sprity",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "name": "aslansky",
    "email": "alexander@slansky.net"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {
    "clone-stats": "0.0.1",
    "core-util-is": "1.0.2",
    "duplexer2": "0.0.2",
    "duplexify": "3.5.0",
    "fork-stream": "0.0.4",
    "gaze": "0.5.2",
    "glob": "4.5.3",
    "glob2base": "0.0.12",
    "graceful-fs": "3.0.11",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "json-stable-stringify": "1.0.1",
    "jsonfile": "2.4.0",
    "minimatch": "2.0.10",
    "mkdirp": "0.5.1",
    "ordered-read-streams": "0.1.0",
    "path-ends-with": "0.2.3",
    "rimraf": "2.6.1",
    "string_decoder": "0.10.31",
    "strip-bom": "1.0.0",
    "through2-filter": "2.0.0",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "sprity",
    "scope": null,
    "escapedName": "sprity",
    "name": "sprity",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/sprity/-/sprity-1.0.8.tgz",
  "_shasum": "b1afdc61f0cec06c069597ab5dddd8f59d8bbd0c",
  "_shrinkwrap": null,
  "_spec": "sprity",
  "_where": "/Users/zachcardais/Sites/Treehouse/FEWD Techdegree/p11_site_performance",
  "author": {
    "name": "Alexander Slansky",
    "email": "alexander@slansky.net",
    "url": "http://slansky.net"
  },
  "bugs": {
    "url": "https://github.com/sprity/sprity/issues"
  },
  "dependencies": {
    "bluebird": "^2.9.24",
    "color": "^0.8.0",
    "colors": "^1.0.3",
    "cssesc": "^0.1.0",
    "fs-extra": "^0.18.2",
    "handlebars": "^3.0.2",
    "imageinfo": "^1.0.4",
    "layout": "~2.2.0",
    "lodash": "^3.7.0",
    "nomnom": "^1.8.1",
    "parse-filepath": "^0.5.0",
    "prettydiff": "^1.11.13",
    "sprity-css": "^1.0.2",
    "sprity-lwip": "^1.0.3",
    "ternary-stream": "^1.2.3",
    "through2": "^0.6.5",
    "vinyl": "^0.4.6",
    "vinyl-fs": "^1.0.0"
  },
  "description": "A image sprite generator",
  "devDependencies": {
    "chai": "^2.2.0",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.13",
    "mocha": "^2.2.4",
    "mocha-lcov-reporter": "^0.0.2",
    "object-stream": "^0.0.1",
    "through2-spy": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b1afdc61f0cec06c069597ab5dddd8f59d8bbd0c",
    "tarball": "https://registry.npmjs.org/sprity/-/sprity-1.0.8.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "0a39d863cdb9dea22c9457dd8ec04fe41cc163b7",
  "homepage": "https://github.com/sprity/sprity",
  "keywords": [
    "sprites",
    "sprite",
    "coordinates",
    "css",
    "scss",
    "less",
    "sass",
    "sprity",
    "css-sprite",
    "gulpfriendly"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sprity/sprity/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./index.js",
  "maintainers": [
    {
      "name": "aslansky",
      "email": "alexander@slansky.net"
    }
  ],
  "name": "sprity",
  "optionalDependencies": {
    "sprity-css": "^1.0.2",
    "sprity-lwip": "^1.0.3"
  },
  "readme": "# sprity\n\n[![NPM version](https://badge.fury.io/js/sprity.svg)](http://badge.fury.io/js/sprity) [![Build Status](https://travis-ci.org/sprity/sprity.svg?branch=master)](https://travis-ci.org/sprity/sprity) [![Coverage Status](https://img.shields.io/coveralls/sprity/sprity.svg)](https://coveralls.io/r/sprity/sprity) [![Code Climate](https://codeclimate.com/github/sprity/sprity/badges/gpa.svg)](https://codeclimate.com/github/sprity/sprity) [![Dependencies](https://david-dm.org/sprity/sprity.svg)](https://david-dm.org/sprity/sprity)\n\n> A modular image sprite generator.\n\n> Generates sprites and proper style files out of a directory of images.\n\n> Supports retina sprites.\n\n> Can inline base64 encoded sprites.\n\n> Supports different output formats\n\n> Supports different image engines\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/sprity)\n\n```\nnpm install sprity --save\n```\n\nIf you want to use `sprity` on your cli install with:\n\n```\nnpm install sprity -g\n```\n\n## Usage\n\n### Programatic usage\n\n```js\nvar sprity = require('sprity');\nsprity.create(options, cb);\n```\n\n### CLI\n\nSee [sprity-cli](https://npmjs.org/package/sprity-cli) for how to use `sprity` on the command line.\n\n### With [Gulp](http://gulpjs.com)\n\nYou can use the sprity.src method with gulp. It creates a gulp compatible vinyl stream. It takes an options object as its only argument.\n\n```js\nvar gulp = require('gulp');\nvar gulpif = require('gulp-if');\nvar sprity = require('sprity');\n\n// generate sprite.png and _sprite.scss\ngulp.task('sprites', function () {\n  return sprity.src({\n    src: './src/images/**/*.{png,jpg}',\n    style: './sprite.css',\n    // ... other optional options\n    // for example if you want to generate scss instead of css\n    processor: 'sass', // make sure you have installed sprity-sass\n  })\n  .pipe(gulpif('*.png', gulp.dest('./dist/img/'), gulp.dest('./dist/css/')))\n});\n```\n\n### With [Grunt](http://gruntjs.com)\n\nSee [grunt-sprity](https://npmjs.org/package/grunt-sprity) for how to use `sprity` with [Grunt](http://gruntjs.com).\n\n## Options\n\n* **src:**               Array or string of globs to find source images to put into the sprite. Read more about globs [here](https://github.com/isaacs/node-glob) [required]\n* **out:**               path of directory to write sprite file to  [*Default:* process.cwd()]\n* **base64:**            inlines base64 encoded sprites in the style file\n* **cssPath:**           path or url of sprites on the web server used to reference the sprite in the styles (relative or absolute path or full url)  [*Default:* ../images]\n* **dimension:**         used dimensions for the sprite. A combination of ratio and dpi. Read more about dimensions: [How to specify dimensions](#how-to-specify-dimensions)\n* **engine**             image processing engine.  Read more about engines: [Image processing engines](#image-processing-engines) [*Default:* lwip]\n* **format**             output format of the sprite (Depends on what engine is used) [*Default:* png when used with lwip]\n* **name**               name of sprite file without file extension [*Default:* sprite]\n* **processor**          style processing module. Read more about style processors: [Style processors](#style-processors) [css]\n* **template**           output template file, overrides processor option. Read more about templates: [Templates](#templates)\n* **style**              file to write css to, if omitted no css is written (relative to out path)\n* **background**         background color of the sprite in hex  [*Default:* #FFFFFF]\n* **cachebuster**        appends a \"cache buster\" to the background image in the form \"?<...>\" (Boolean)  [*Default:* false]\n* **margin**             margin in px between tiles  [*Default:* 4]\n* **opacity**            background opacity (0 - 100) of the sprite. defaults to 0 when png or 100 when jpg [*Default:* 0]\n* **orientation**        orientation of the sprite image (vertical|horizontal|binary-tree)  [*Default:* vertical]\n* **prefix**             prefix for the class name used in css (without .)\n* **no-sort**            disable sorting of layout. Read more about: [Layout algorithms](https://github.com/twolfson/layout#algorithms)\n* **split**              create sprite images for every sub folder [*Default:* false] [How to use split option](#how-to-use-split-option)\n* **style-indent-char**  Character used for indentation of styles (space|tab) [*Default:* space]\n* **style-indent-size**  Number of characters used for indentation of styles  [*Default:* 2]\n\n## How to specify dimensions\n\nDimensions are used to specify different sizes of sprites. You can for example create a normal and a retina sprite by providing the following object to `sprity's` options:\n\n```js\n'dimension': [{\n  ratio: 1, dpi: 72\n}, {\n  ratio: 2, dpi: 192\n}],\n```\n\nOn command line this would work as follows:\n\n```sh\nsprity out/ images/*.png -s style.css -d 1:72 -d 2:192\n```\n\nYou can provide as many dimensions as you want. Just keep in mind that the source images you provide need to be for the biggest dimension. For the above example the images would need to have 192dpi.\n\n## How to use split option\n\nWhen you enable the split option `sprity` will look at sub directories of the src option and will generate a sprite per sub directory.\nFor example if you have the following directory structure:\n\n```\nsrc\n |- icons\n      |- editor\n      |- file\n      |- maps\n      |- navigation\n      |- notification\n```\n\nand the options:\n\n```javascript\nvar options = {\n  out: './dist',\n  src: './src/icons/**/*.png',\n  split: true\n}\n```\n\n`sprity` will generate the following sprites in ./dist:\n\n* sprite-editor.png\n* sprite-file.png\n* sprite-maps.png\n* sprite-navigation.png\n* sprite-notification.png\n\nWith [sprity-cli](https://npmjs.org/package/sprity-cli) you would use the command:\n\n```sh\nsprity create \"./dist\" \"src/sprites/**/*.png\" --split\n```\n\nTo change the name of the sprites to for example icons-editor.png use the name option:\n\n```javascript\nvar options = {\n  out: './dist',\n  src: './src/icons/**/*.png',\n  split: true,\n  name: 'icons'\n}\n```\n\n## Image processing engines\n\n`sprity` can use different image processing engines. `sprity` uses the engine to create and manipulate the sprites. Image processing engines may have there specific requirements. So before installing one please have a look at the documentation of the engine.\n\n### Installation\n\nSince image engines are just node.js modules you can install them with npm.\n\n```sh\nnpm install <engine-name>\n```\n\n### Usage\n\nYou can switch image engines with the engine option. If the image engine name starts with `sprity-` you can omit that. For example to use [sprity-canvas](https://npmjs.org/package/sprity-canvas):\n\n```sh\nsprity out/ images/*.png -s style.css --engine canvas\n# or\nsprity out/ images/*.png -s style.css --engine sprity-canvas\n```\n\n### Available image processing engines\n\n* [sprity-lwip](https://npmjs.org/package/sprity-lwip) - the default engine. is automatically installed, when installing `sprity`\n* [sprity-canvas](https://npmjs.org/package/sprity-canvas) - uses [node-canvas](https://github.com/Automattic/node-canvas) to create sprites. Has some non-nodejs requirements.\n* [sprity-gm](https://npmjs.org/package/sprity-gm) - uses [gm](https://www.npmjs.com/package/gm) as its image processing library. Requires GraphicsMagick or ImageMagick.\n\n### Write your own\n\nYou can find more about how to write an image processing engine for `sprity` in the [sprity wiki](https://github.com/sprity/sprity/wiki/How-to-write-a-sprity-image-processor-engine)\n\n## Style processors\n\nStyle processors generate are used for the generation of the style files. By default `sprity` can create css files, but with the help of style processors it can generate a lot of different formats.\n\n### Installation\n\nStyle processors are simple node modules, you can install them with npm:\n\n```sh\nnpm install <processor-name>\n```\n\n### Usage\n\nYou can switch style processors with the processor option. If the processor name starts with `sprity-` you can omit that. For example to use [sprity-sass](https://npmjs.org/package/sprity-sass):\n\n```sh\nsprity out/ images/*.png -s style.scss --processor sass\n# or\nsprity out/ images/*.png -s style.scss --processor sprity-sass\n```\n\n### Available style processors\n\n* [sprity-css](https://npmjs.org/package/sprity-css) - the default style processor. is automatically installed, when installing `sprity`\n* [sprity-sass](https://npmjs.org/package/sprity-sass) - generates scss or sass files\n* [sprity-less](https://npmjs.org/package/sprity-less) - generates less files\n* [sprity-css-rollover](https://github.com/xErik/sprity-css-rollover) - generates css rollovers\n### Write your own\n\nYou can find more about how to write your own style processor in the [sprity wiki](https://github.com/sprity/sprity/wiki/How-to-write-a-sprity-style-processor)\n\n## Templates\n\nIf you don't want to write a processor module or you only need a simple template for one of you're projects you can use the templating system of `sprity`.\n\n`sprity` uses [http://handlebarsjs.com/](Handlebars) to process your templates. To quickly start you can use the templates from [sprity-css](https://github.com/sprity/sprity-css/blob/master/template/css.hbs) as a starting point.\n\n### Available variables\n\nYou can find more about the variables and functions available in the handlebars templates in the [sprity wiki](https://github.com/sprity/sprity/wiki/Available-variable-in-custom-templates)\n\n---\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sprity/sprity?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sprity/sprity.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha --report html -- -R spec",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "lint": "eslint .",
    "style": "jscs test/*.js lib/**/*.js index.js",
    "test": "mocha --reporter spec"
  },
  "version": "1.0.8"
}
