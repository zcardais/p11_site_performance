{
  "_args": [
    [
      {
        "raw": "gulp-sprity",
        "scope": null,
        "escapedName": "gulp-sprity",
        "name": "gulp-sprity",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/zachcardais/Sites/Treehouse/FEWD Techdegree/p11_site_performance"
    ]
  ],
  "_from": "gulp-sprity@latest",
  "_id": "gulp-sprity@0.2.5",
  "_inCache": true,
  "_location": "/gulp-sprity",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/gulp-sprity-0.2.5.tgz_1480492184927_0.7449294119141996"
  },
  "_npmUser": {
    "name": "daizch",
    "email": "daizech@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-sprity",
    "scope": null,
    "escapedName": "gulp-sprity",
    "name": "gulp-sprity",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-sprity/-/gulp-sprity-0.2.5.tgz",
  "_shasum": "46fc651b40c221c32740a598ec74e79cb7e04a63",
  "_shrinkwrap": null,
  "_spec": "gulp-sprity",
  "_where": "/Users/zachcardais/Sites/Treehouse/FEWD Techdegree/p11_site_performance",
  "author": {
    "name": "zechengdai",
    "email": "daizech@gmail.com",
    "url": "https://github.com/daizch"
  },
  "bugs": {
    "url": "https://github.com/daizch/gulp-sprity/issues"
  },
  "dependencies": {
    "fs-extra": "^0.30.0",
    "gm": "^1.23.0",
    "gulp-util": "^3.0.7",
    "lodash": "^4.15.0",
    "postcss": "^5.1.2",
    "spritesmith": "^3.1.0",
    "through2": "^2.0.1"
  },
  "description": "A gulp plugin for generating css sprite",
  "devDependencies": {
    "gulp-clean-css": "^2.0.12",
    "gulp-if": "^2.0.1",
    "istanbul": "^0.4.4",
    "mocha": "^2.5.3",
    "should": "^10.0.0",
    "vinyl-fs": "^2.4.3"
  },
  "directories": {},
  "dist": {
    "shasum": "46fc651b40c221c32740a598ec74e79cb7e04a63",
    "tarball": "https://registry.npmjs.org/gulp-sprity/-/gulp-sprity-0.2.5.tgz"
  },
  "engines": {
    "node": ">=0.10",
    "npm": ">=1.4.3"
  },
  "gitHead": "a48a8167c04cedc109b0aead9684fcbc94b9da00",
  "homepage": "https://github.com/daizch/gulp-sprity#readme",
  "keywords": [
    "gulp",
    "css",
    "sprite",
    "gulp-sprity"
  ],
  "license": [
    {
      "type": "MIT",
      "url": "https://github.com/daizch/gulp-sprity/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "daizch",
      "email": "daizech@gmail.com"
    }
  ],
  "name": "gulp-sprity",
  "optionalDependencies": {},
  "readme": "# gulp-sprity\n\n[![NPM version](https://img.shields.io/npm/v/gulp-sprity.svg?style=flat)](https://www.npmjs.com/package/gulp-sprity)\n[![Build Status](https://secure.travis-ci.org/Dijason/gulp-sprity.svg?branch=master)](http://travis-ci.org/Dijason/gulp-sprity)\n\n> A [gulp](https://github.com/gulpjs/gulp) plugin to convert a set of images into a spritesheet.\n\n## Usage\n\nFirstly, install `gulp-sprity` as a development dependency:\n\n```shell\nnpm install gulp-sprity --save-dev\n```\n\nThen, add it into your `gulpfile.js`:\n\n**convert by default mode, background image url with end of #sprite:**\n\n```javascript\nconst cleanCSS = require('gulp-clean-css');\nconst gulpif = require('gulp-if');\nconst sprity = require('gulp-sprity');\nconst path = require('path');\n\nfunction fileTypeOf(type) {\n    return function (file) {\n        return path.extname(file.path) === '.' + type;\n    };\n}\n\ngulp.src(\"src/css/foo.css\")\n    .pipe(sprity())\n    .pipe(gulpif(fileTypeOf('css'),cleanCSS()))\n    .pipe(gulp.dest(\"build\"));\n```\n\n`input`\n\n```css\n/*foo.css*/\n.icon {\n    background-image: url('icon.png#sprite');\n    background-repeat: no-repeat;\n    width: 100px;\n    height: 100px;\n}\n```\n\n`output`\n\n```css\n/*foo.css*/\n.icon {\n    background-image: url('sprites/foo_sprite.png');\n    background-repeat: no-repeat;\n    background-position: -334px 0\n    width: 100px;\n    height: 100px;\n}\n```\n\n** imagePixelRatio **\n```javascript\ngulp.src(\"src/css/foo.css\")\n    .pipe(sprity({imagePixelRatio:2}))\n    .pipe(gulpif(fileTypeOf('css'),cleanCSS()))\n    .pipe(gulp.dest(\"build\"));\n```\n\n`input`\n\n```css\n/*foo.css*/\n.icon {\n    background-image: url('icon.png#sprite');\n    background-repeat: no-repeat;\n    width: 100px;\n    height: 100px;\n}\n```\n\n`output`\n\n```css\n/*foo.css*/\n.icon {\n    background-image: url('sprites/foo_sprite.png');\n    background-repeat: no-repeat;\n    background-position: -300px 40px; //ps: original position is -600px and 80px\n    background-size: 400px 300px;  //ps: original size is 800px and 600px\n    width: 100px;\n    height: 100px;\n}\n```\n\n**spritePrefix usage:**\n\n```javascript\nconst cleanCSS = require('gulp-clean-css');\nconst gulpif = require('gulp-if');\nconst sprity = require('gulp-sprity');\nconst path = require('path');\n\nfunction fileTypeOf(type) {\n    return function (file) {\n        return path.extname(file.path) === '.' + type;\n    };\n}\n\ngulp.src(\"src/css/foo.css\")\n    .pipe(sprity({\n        spritePrefix: 'demo/css/sprites/'\n    }))\n    .pipe(gulpif(fileTypeOf('css'),cleanCSS()))\n    .pipe(gulp.dest(\"build\"));\n```\n\n**the same as:**\n\n```javascript\nsprity({\n        backgroundUrlHandler: function(backgroungImageUrl, imgFilePath) {\n            return 'demo/css/' + backgroungImageUrl;\n        },\n        spritePathReplacer: function(imgFilePath, backgroungImageUrl) {\n            return 'demo/css/' + backgroungImageUrl;\n        }\n    })\n```\n\n`output like:`\n\n```css\n/*foo.css*/\n.icon {\n    background-image: url('demo/css/sprites/foo_sprite.png'); /*image file will be saved at build/demo/css/sprites/foo_sprite.png*/\n    background-repeat: no-repeat;\n    background-position: -334px 0\n    width: 100px;\n    height: 100px;\n}\n```\n\n\n## Parameters\n\n### keepInRoot\nType: `bool`\ndefault `undefined`\n\nTo mark whether put the image files into the same directory of image file path. For example, one file path is /Users/demo/src/images/dir1/img1.png. Another one is /Users/demo/src/images/dir2/img2.png. Then the spriter will be saved in /Users/demo/src/images.\n\n### spriteMark\nType: `String`\ndefault `#sprite`\n\nTo mark which image should be merged into a spritesheet.\n\n\n### spritePrefix\nType: `String`\ndefault: `undefined`\n\nTo add the prefix directory path of spritesheet and save the sprited image to the prefix directory.\n\n\n### imagePixelRatio\nType: Integer\ndefault `undefined`\n\nTo scale the background-size and background-position of the spriter for HD images. \n\n\n### spriteFileNameReplacer\nType: `Function`\ndefault: `undefined`\n\nParameters:\n* fileName: the file name of the original css file with no extname.\n\nTo change the file name of the sprited image.\n\n### backgroundUrlHandler\nType: `Function`\ndefault `undefined`\n\nParameters:\n* imgFilePath: origin saved path of spritesheet\n* filePath: the file path of original file\n\nTo handle the url of background-image, output what you want to insert into css file.\n\n### spritePathReplacer\nType: `Function`\ndefault `undefined`\n\nParameters:\n* dir: backgroung image url which will be injected into css file\n* imgFilePath: origin saved path of spritesheet\n* filePath: the file path of original file\n\n\nTo replace the path of a spritesheet where you want to save the spritesheet.\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "github",
    "url": "git+https://github.com/daizch/gulp-sprity.git"
  },
  "scripts": {
    "test": "istanbul test _mocha --report html -- test/*.js --reporter spec"
  },
  "version": "0.2.5"
}
